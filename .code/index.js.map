{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { networkAdapter } from './network';\nimport {INetwork, IConfig, IWidget, IDapp, SignWrapped} from './types';\nimport {AccountModel} from '@emit-technology/emit-lib';\nimport { onWindowLoad,validateSecureOrigin} from './utils';\nimport { windowLoadHandler,WidgetManager } from './widget';\nimport {Web3Manager} from './provider';\nimport {DataNode} from \"./rpc/dataNode\";\nimport {ChainType} from \"@emit-technology/emit-lib\";\n\nconst VERSION = '$$EMIT_BOX_VERSION$$';\n\nonWindowLoad()\n    .then(windowLoadHandler)\n    .catch(() => {}); // Prevents unhandledPromiseRejectionWarning, which happens when using React SSR;\n\nclass EmitBox {\n    private _widgetManagerInstance?: WidgetManager;\n    private _web3ManagerInstance?: Web3Manager;\n    private _config?: IConfig;\n    public emitDataNode?: DataNode;\n\n    constructor(dapp: IDapp, network: string | INetwork) {\n        validateSecureOrigin();\n        this._validateParams(network);\n        this._config = {\n            network: networkAdapter(network),\n            version: VERSION,\n            dapp: dapp\n        };\n\n        this._getWidgetCommunication = this._getWidgetCommunication.bind(this);\n        this._widgetManagerInstance = new WidgetManager(this.config);\n\n        this.changeNetwork = this.changeNetwork.bind(this);\n        this.getWidget = this.getWidget.bind(this);\n        this.onActiveWalletChanged = this.onActiveWalletChanged.bind(this);\n        this.onError = this.onError.bind(this);\n        this.showWidget = this.showWidget.bind(this);\n        this.setSelectedAddress = this.setSelectedAddress.bind(this);\n        this.newProvider = this.newProvider.bind(this);\n\n        this.emitDataNode = new DataNode(this.config.network.nodeUrl,this._getWidgetCommunication,this._config);\n    }\n\n    get _widgetManager() {\n        return this._widgetManagerInstance!;\n    }\n\n    get _web3Manager() {\n        if(!this._web3ManagerInstance){\n            this._web3ManagerInstance = new Web3Manager(this.config, this._getWidgetCommunication);\n        }\n        return this._web3ManagerInstance!;\n    }\n\n    get config() {\n        return this._config!;\n    }\n\n    private async _getWidgetCommunication() {\n        return (await this._widgetManager.getWidget()).communication;\n    }\n\n    get web3Provider() {\n        return this._web3Manager.provider;\n    }\n\n    // Todo: deprecate\n    get provider() {\n        return this.web3Provider;\n    }\n\n    newProvider(config:IConfig){\n        return new Web3Manager(config, this._getWidgetCommunication).provider;\n    }\n\n    changeNetwork(network: string | INetwork) {\n        this._web3Manager.changeNetwork(network);\n    }\n\n    setSelectedAddress(address: string) {\n        this._web3Manager.setSelectedAddress(address);\n    }\n\n    // async singleton\n    async getWidget(): Promise<IWidget> {\n        return this._widgetManager.getWidget();\n    }\n\n    // Population by the dev of SDK callbacks that might be invoked by the widget\n    onActiveWalletChanged(callback: (walletAddress: string) => void) {\n        this._widgetManager.setOnActiveWalletChangedCallback(callback);\n    }\n\n    onActiveAccountChanged(callback: (account: AccountModel) => void) {\n        this._widgetManager.setOnActiveAccountChangedCallback(callback);\n    }\n\n    onError(callback: (error: Error) => void) {\n        this._widgetManager.setOnErrorCallback(callback);\n    }\n\n    // SDK methods that could be invoked by the user and handled by the widget\n    async showWidget() {\n        return this._widgetManager.showWidget();\n    }\n\n    async batchSignMsg(signArr:Array<SignWrapped>){\n        return this._widgetManager.batchSignMsg(signArr);\n    }\n\n    async requestAccount(accountId?:string){\n        return this._widgetManager.requestAccount(accountId);\n    }\n\n    async setLanguage(code:string){\n        return this._widgetManager.setLanguage(code);\n    }\n\n    async calcGasPrice(gasLimitHex:string,chain:ChainType){\n        return this._widgetManager.calcGasPrice(gasLimitHex,chain);\n    }\n\n    // internal methods\n    private _validateParams(network: string | INetwork) {\n\n        if (!network) {\n            throw new Error(\n                \"[EMIT] 'network' is required.\",\n            );\n        }\n    }\n}\nexport * from './types';\n\nexport default EmitBox;\n"]}