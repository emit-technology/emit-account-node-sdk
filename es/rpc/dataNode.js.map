{"version":3,"file":"dataNode.js","sourceRoot":"","sources":["../../src/rpc/dataNode.ts"],"names":[],"mappings":"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","sourcesContent":["import Rpc from \"./index\";\nimport {\n  Block,\n  BlockWrapped,\n  DataSet,\n  Factor,\n  FactorSet,\n  getDefaultHash,\n  PrepareBlock,ConfirmedAccount,\n} from \"../types/emit\";\nimport { METHOD } from \"./method\";\nimport emitUtils from \"../utils/emitUtils\";\nimport {IConfig, IMethods, SettleResp} from \"../types\";\nimport BigNumber from \"bignumber.js\";\nimport {AsyncMethodReturns} from \"penpal\";\n\nexport class DataNode extends Rpc {\n\n  constructor(host:string,private getWidgetCommunication: () => Promise<AsyncMethodReturns<IMethods>>,private config:IConfig) {\n    super(host);\n  }\n\n  getConfirmedAccount = async (address: string): Promise<ConfirmedAccount> => {\n    return await this.post(METHOD.getConfirmedAccount, [address]);\n  };\n\n  getConfirmedBlock = async (address: string): Promise<BlockWrapped> => {\n    return await this.post(METHOD.getConfirmedBlock, [address]);\n  };\n\n  getData = async (address: string, key: string) => {\n    return await this.post(METHOD.getData, [address, emitUtils.strToHex(key, 32)]);\n  };\n\n  getBlock = async (address: string, num: any) => {\n    return await this.post(METHOD.getBlock, [\n      address,\n      new BigNumber(num).toNumber(),\n    ]);\n  };\n\n  toHex(str: string, len?: number) {\n    if (len) {\n      const buf = Buffer.alloc(len, 0);\n      const strBuf = Buffer.from(str);\n      return buf\n        .fill(strBuf, 0, strBuf.length > 32 ? 32 : strBuf.length)\n        .toString(\"hex\");\n    }\n    return Buffer.from(str).toString(\"hex\");\n  }\n\n  getLatestBlocks = async (\n    address: string,\n    pageSize: number = 10\n  ): Promise<Array<BlockWrapped>> => {\n    return await this.post(METHOD.getLatestBlocks, [address, pageSize]);\n  };\n\n  getSettles = async (address: string): Promise<Array<SettleResp>> => {\n    const rest: Array<SettleResp> = await this.post(METHOD.getSettles, [\n      address,\n    ]);\n    rest.sort(this.compareSettles);\n    return rest;\n  };\n\n  compareSettles = (a: SettleResp, b: SettleResp) => {\n    if (a.factor.timestamp < b.factor.timestamp) {\n      return 1;\n    } else if (a.factor.timestamp > b.factor.timestamp) {\n      return -1;\n    }\n    return 0;\n  };\n\n  getFactors = async (address: string): Promise<Array<Factor>> => {\n    return await this.post(METHOD.getFactors, [address]);\n  };\n\n  checkAccount = async (address: string) => {\n    return await this.post(METHOD.checkAccount, [address]);\n  };\n\n  genPrepareBlock = async (\n    address: string,\n    data_sets: Array<DataSet>,\n    factor_set: FactorSet,\n    data?: string\n  ): Promise<PrepareBlock> => {\n    const convertSet: Array<DataSet> = [];\n    data_sets.forEach((v: DataSet) => {\n      convertSet.push({\n        name: this.toHex(v.name, 32),\n        data: this.toHex(v.data),\n      });\n    });\n\n    const blk: Block = {\n      num: 0,\n      timestamp: Math.ceil(Date.now() / 1000),\n      parent_hash: getDefaultHash(),\n      data_sets: convertSet,\n      data: \"\",\n      factor_set: factor_set,\n    };\n    if (data) {\n      blk.data = Buffer.from(data).toString(\"hex\");\n    }\n    const blk_wrapped = await this.getConfirmedBlock(address);\n    const cfm_blk: Block | undefined = blk_wrapped\n      ? blk_wrapped.block\n      : undefined;\n    const cfm_act = await this.getConfirmedAccount(address);\n    if (\n      cfm_act &&\n      cfm_blk &&\n      cfm_act.blk_ref &&\n      cfm_act.blk_ref.num !== cfm_blk.num\n    ) {\n      return Promise.reject(\n        \"The num of confirmed Account is not same with the num of confirmed block!\"\n      );\n    }\n\n    if (cfm_blk && cfm_act) {\n      blk.num = cfm_blk.num + 1;\n      if (cfm_blk.parent_hash) {\n        blk.parent_hash = cfm_act.blk_ref.hash;\n      }\n    }\n\n    const blkData: PrepareBlock = {\n      address: address,\n      blk: blk,\n    };\n\n    return Promise.resolve(blkData);\n  };\n\n  prepareBlock = async (\n    prepareBlock: PrepareBlock\n  ): Promise<boolean> => {\n    const signData: any = (await this.getWidgetCommunication() ).signTransaction(prepareBlock,this.config)\n    if (!signData) {\n      return Promise.reject(\"sign error\");\n    }\n    const rest = await this.post(METHOD.prepareBlock, [signData]);\n    return Promise.resolve(rest);\n  };\n}\n// const defaultHost = () => {\n//   let protocol = window.location.protocol;\n//   let host = window.location.hostname;\n//   let port = window.location.port;\n//   return `${protocol}//${host}:${parseInt(port) - 1}`;\n// };\n"]}