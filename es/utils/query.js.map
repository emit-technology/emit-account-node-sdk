{"version":3,"file":"query.js","sourceRoot":"","sources":["../../src/utils/query.ts"],"names":[],"mappings":"AASA;IAEI,kBAAoB,QAAa;QAAb,aAAQ,GAAR,QAAQ,CAAK;IAAG,CAAC;IAErC,mCAAgB,GAAhB,UAAiB,WAAmB,EAAE,eAAwB;QAC1D,OAAO,IAAI,CAAC,SAAS,CAAC,sBAAsB,EAAE,WAAW,EAAE,eAAe,CAAC,CAAC;IAChF,CAAC;IAED,0BAAO,GAAP,UAAQ,OAAe;QACnB,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC5D,CAAC;IAED,8BAAW,GAAX,UAAY,QAAa;QACrB,OAAO,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;IACvD,CAAC;IAEO,4BAAS,GAAjB,UAAkB,UAAkB;QAApC,iBAkBC;QAlBqC,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QAChD,OAAO,IAAI,OAAO,CAAM,UAAC,OAAO,EAAE,MAAM;YACpC,KAAI,CAAC,QAAQ,CAAC,SAAS,CACnB;gBACI,EAAE,EAAE,EAAE;gBACN,OAAO,EAAE,KAAK;gBACd,MAAM,EAAE,UAAU;gBAClB,MAAM,EAAE,IAAI;aACf,EACD,UAAC,KAAU,EAAE,QAAa;gBACtB,IAAI,KAAK,EAAE;oBACP,MAAM,CAAC,KAAK,CAAC,CAAC;iBACjB;qBAAM;oBACH,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;iBAC5B;YACL,CAAC,CACJ,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IACL,eAAC;AAAD,CAAC,AAnCD,IAmCC;;AAGD;IAEI,mBAAoB,QAAa;QAAb,aAAQ,GAAR,QAAQ,CAAK;IAAG,CAAC;IAErC,oCAAgB,GAAhB,UAAiB,WAAmB,EAAE,eAAwB;QAC1D,OAAO,IAAI,CAAC,SAAS,CAAC,uBAAuB,EAAE,WAAW,EAAE,eAAe,CAAC,CAAC;IACjF,CAAC;IAED,2BAAO,GAAP,UAAQ,OAAe;QACnB,OAAO,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC7D,CAAC;IAED,+BAAW,GAAX,UAAY,QAAa;QACrB,OAAO,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;IACxD,CAAC;IAEO,6BAAS,GAAjB,UAAkB,UAAkB;QAApC,iBAkBC;QAlBqC,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QAChD,OAAO,IAAI,OAAO,CAAM,UAAC,OAAO,EAAE,MAAM;YACpC,KAAI,CAAC,QAAQ,CAAC,SAAS,CACnB;gBACI,EAAE,EAAE,EAAE;gBACN,OAAO,EAAE,KAAK;gBACd,MAAM,EAAE,UAAU;gBAClB,MAAM,EAAE,IAAI;aACf,EACD,UAAC,KAAU,EAAE,QAAa;gBACtB,IAAI,KAAK,EAAE;oBACP,MAAM,CAAC,KAAK,CAAC,CAAC;iBACjB;qBAAM;oBACH,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;iBAC5B;YACL,CAAC,CACJ,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IACL,gBAAC;AAAD,CAAC,AAnCD,IAmCC","sourcesContent":["export interface IQuery {\n    getBlockByNumber: (blockNumber: string, fullTransaction: boolean) => any;\n\n    getCode : (address: string) => any;\n\n    estimateGas : (txParams: any) => any;\n\n}\n\nexport class EthQuery implements IQuery{\n\n    constructor(private provider: any) {}\n\n    getBlockByNumber(blockNumber: string, fullTransaction: boolean) {\n        return this.sendAsync('eth_getBlockByNumber', blockNumber, fullTransaction);\n    }\n\n    getCode(address: string):any {\n        return this.sendAsync('eth_getCode', address, 'latest');\n    }\n\n    estimateGas(txParams: any):any {\n        return this.sendAsync('eth_estimateGas', txParams);\n    }\n\n    private sendAsync(methodName: string, ...args: any[]) {\n        return new Promise<any>((resolve, reject) => {\n            this.provider.sendAsync(\n                {\n                    id: 42,\n                    jsonrpc: '2.0',\n                    method: methodName,\n                    params: args,\n                },\n                (error: any, response: any) => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve(response.result);\n                    }\n                },\n            );\n        });\n    }\n}\n\n\nexport class SeroQuery implements IQuery{\n\n    constructor(private provider: any) {}\n\n    getBlockByNumber(blockNumber: string, fullTransaction: boolean) {\n        return this.sendAsync('sero_getBlockByNumber', blockNumber, fullTransaction);\n    }\n\n    getCode(address: string):any {\n        return this.sendAsync('sero_getCode', address, 'latest');\n    }\n\n    estimateGas(txParams: any):any {\n        return this.sendAsync('sero_estimateGas', txParams);\n    }\n\n    private sendAsync(methodName: string, ...args: any[]) {\n        return new Promise<any>((resolve, reject) => {\n            this.provider.sendAsync(\n                {\n                    id: 32,\n                    jsonrpc: '2.0',\n                    method: methodName,\n                    params: args,\n                },\n                (error: any, response: any) => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve(response.result);\n                    }\n                },\n            );\n        });\n    }\n}\n"]}