{"version":3,"file":"widget.js","sourceRoot":"","sources":["../../src/types/widget.ts"],"names":[],"mappings":"","sourcesContent":["import {IConfig} from \"./\";\nimport {AccountModel,ChainType} from '@emit-technology/emit-lib';\nimport { AsyncMethodReturns } from 'penpal';\n\nexport interface IMethods {\n\n    getAccounts: (config:IConfig) => Promise<{error:string;result:Array<string>}>;\n\n    signTransaction: (txParams: any,config:IConfig) => Promise<{error:string;result:string}>;\n\n    signMessage: (msgParams: any,config:IConfig)  => Promise<{error:string;result:string}>;\n\n    relay: (payload: IPayload,config:IConfig)  => Promise<{ error: string; result: any }>;\n\n    showWidget : (config:IConfig) => Promise<void>;\n\n    setConfig: (config: IConfig) => Promise<void>;\n\n    batchSignMessage: (config: IConfig,signArr:Array<SignWrapped>)  => Promise<{error:string;result:Array<SignWrapped>}>;\n\n    requestAccount: (config: IConfig) => Promise<{error: string, result: AccountModel}>;\n\n    calcGasPrice: (gasLimitHex:string,chain:ChainType,config: IConfig) => Promise<{error: string, result: string}>; //return gas price hex\n}\n\nexport interface SignWrapped{\n    chain: ChainType\n    msg:any;\n    result?:any;\n}\n\nexport interface IPayload {\n    id: number;\n    jsonrpc: string;\n    method: string;\n    params: any[];\n}\n\nexport interface IReply {\n    id: number;\n    jsonrpc: string;\n    method: string;\n    result?:any;\n    error?:any\n}\n\nexport interface IWidget {\n    communication: AsyncMethodReturns<IMethods>;\n    widgetFrame: HTMLDivElement;\n}"]}